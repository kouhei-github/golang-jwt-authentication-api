---
- name: Ensure common packages are installed
  apt: pkg={{ item }} state=installed update_cache=yes cache_valid_time=3600
  with_items:
    - python-pycurl
  sudo: true
  tags: postgres_common

- name: Ensure packages are installed
  apt: pkg={{ item }}
  with_items:
    - postgresql-{{ pg_version }}
    - postgresql-client-{{ pg_version }}
    - python-psycopg2
  register: db_setup
  environment: pg_proxy_env
  sudo: true
  tags: postgres_packages

- name: Recreate cluster
  include: recreate_cluster.yml
  when: pg_cluster_recreate
  tags: postgres_cluster

- name: Update pg_hba.conf file
  template: src=pg_hba.conf.j2 dest=/etc/postgresql/{{ pg_version }}/{{ pg_cluster }}/pg_hba.conf owner={{ pg_admin_user }} group={{ pg_admin_user }} mode=0640
  notify: restart postgresql
  sudo: true
  tags: postgres_config

- name: Update postgres.conf file
  template: src=master.conf.j2 dest=/etc/postgresql/{{ pg_version }}/{{ pg_cluster }}/postgresql.conf owner={{ pg_admin_user }} group={{ pg_admin_user }} mode=0644
  sudo: true
  notify: restart postgresql
  tags: postgres_config

- include: extensions_common.yml
  tags: postgres_extensions

- meta: flush_handlers

- name: ensure postgresql server is started
  service:
    name: postgresql
    state: started
    enabled: yes
    arguments: "{{ pg_version }}"
    pattern: "/usr/lib/postgresql/{{ pg_version | float }}/bin/postgres -D /var/lib/postgresql/{{ pg_version }}/{{ pg_cluster }}"
  sudo: true
  tags: postgres_start

- include: postgis.yml
  when: pg_postgis
  tags: postgres_postgis

- name: Ensure database is created
  sudo_user: root
  sudo: yes
  postgresql_db: name={{ db_name }}
                 template='template0'
                 state=present
                 login_user='postgres'
                 login_password='postgres'

- name: Ensure user has access to the database
  sudo_user: root
  sudo: yes
  postgresql_user: db={{ db_name }}
                   name={{ db_user }}
                   password={{ db_password }}
                   priv=ALL
                   state=present
                   login_user='postgres'
                   login_password='postgres'


- name: Ensure user does not have unnecessary privileges
  sudo_user: root
  sudo: yes
  postgresql_user: name={{ db_user }}
                   role_attr_flags=NOSUPERUSER,NOCREATEDB
                   state=present
                   login_user='postgres'
                   login_password='postgres'

- name: postgresql - create db
  sudo_user: root
  sudo: yes
  postgresql_db: name={{ db_name }}
                 encoding="UTF-8"
                 template='template0'
                 login_user='postgres'
                 login_password='postgres'

- name: Ensure database is created
  sudo_user: root
  sudo: yes
  postgresql_db: name={{ db_name }}
                 template='template0'
                 state=present
                 login_user='postgres'
                 login_password='postgres'

- name: postgresql - create db Tests
  sudo_user: root
  sudo: yes
  postgresql_db: name={{ db_name_tests }}
                 encoding="UTF-8"
                 template='template0'
                 login_user='postgres'
                 login_password='postgres'

- name: Ensure database is created Tests
  sudo_user: root
  sudo: yes
  postgresql_db: name={{ db_name_tests }}
                 template='template0'
                 state=present
                 login_user='postgres'
                 login_password='postgres'